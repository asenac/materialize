cat
(defsource x [int64 int64])
(defsource y [int64 int64])
----
ok

build
(outer_join (get x) (get y) [])
----
----
%0 =
| Get x (u0)

%1 =
| Get y (u1)

%2 =
| LeftOuterJoin %0 %1
----
----

build
(full_outer_join (get x) (get y) [])
----
----
%0 =
| Get x (u0)

%1 =
| Get y (u1)

%2 =
| FulllOuterJoin %0 %1
----
----

build
(outer_join (get x) (get y) [(call_binary eq #0 #2)])
----
----
%0 =
| Get x (u0)

%1 =
| Get y (u1)

%2 =
| LeftOuterJoin %0 %1 (#0 = #2)
----
----

# outer-to-inner join conversion during predicate pushdown
build apply=PredicatePushdown
(filter (outer_join (get x) (get y) [(call_binary eq #0 #2)]) [(call_binary eq #2 1)])
----
----
%0 =
| Get x (u0)

%1 =
| Get y (u1)

%2 =
| Join %0 %1
| | implementation = Unimplemented
| Filter (#0 = #2), (#2 = 1)
----
----

build apply=OuterJoinLowering
(outer_join (get x) (get y) [(call_binary eq #0 #2)])
----
----
%0 =
| Get x (u0)

%1 =
| Get y (u1)

%2 = Let l0 =
| Join %0 %1
| | implementation = Unimplemented
| Filter (#0 = #2)

%3 = Let l1 =
| Get %2 (l0)
| Project (#0)
| Distinct group=(#0)

%4 =
| Get x (u0)

%5 =
| Join %4 %3 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1)
| Negate

%6 =
| Get x (u0)

%7 =
| Union %5 %6
| Map null, null

%8 =
| Union %7 %2
----
----

# end-to-end

build
(filter (outer_join (get x) (get y) [(call_binary eq #0 #2)]) [(call_binary eq #1 1)])
----
----
%0 =
| Get x (u0)

%1 =
| Get y (u1)

%2 =
| LeftOuterJoin %0 %1 (#0 = #2)
| Filter (#1 = 1)
----
----

build apply=(PredicatePushdown)
(filter (outer_join (get x) (get y) [(call_binary eq #0 #2)]) [(call_binary eq #1 1)])
----
----
%0 =
| Get x (u0)
| Filter (#1 = 1)

%1 =
| Get y (u1)

%2 =
| LeftOuterJoin %0 %1 (#0 = #2)
| Filter
----
----

build apply=(PredicatePushdown,OuterJoinLowering)
(filter (outer_join (get x) (get y) [(call_binary eq #0 #2)]) [(call_binary eq #1 1)])
----
----
%0 = Let l0 =
| Get x (u0)
| Filter (#1 = 1)

%1 =
| Get y (u1)

%2 = Let l1 =
| Join %0 %1
| | implementation = Unimplemented
| Filter (#0 = #2)

%3 = Let l2 =
| Get %2 (l1)
| Project (#0)
| Distinct group=(#0)

%4 =
| Join %0 %3 (= #0 #2)
| | implementation = Unimplemented
| Project (#0, #1)
| Negate

%5 =
| Union %4 %0
| Map null, null

%6 =
| Union %5 %2
| Filter
----
----
